{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["ReactGA","initialize","pageview","window","location","pathname","search","pdfMake","vfs","pdfFonts","App","props","addToList","e","preventDefault","links","state","currentValue","split","forEach","element","getMetrics","getMetricsRefresh","pageData","postData","setState","loading","url","type","postId","facebookData","pageId","value","FB","api","access_token","response","console","log","link","pageName","text","name","message","created_time","Date","toLocaleString","impressions","insights","data","values","reach","engagement","valueList","push","saveToDB","currentPage","includes","slice","pop","deleteRow","oldData","_","remove","db","firebase","collection","doc","appUserID","get","then","exists","undefined","archive","set","merge","catch","error","handleInputChange","target","handleDropdownChange","handleSort","clickedColumn","column","direction","reverse","sortBy","accessToken","items","loadFacebook","bind","forceRefresh","buildReport","firebaseUI","signOut","this","apiKey","authDomain","projectId","onAuthStateChanged","user","loginFacebook","uid","ui","firebaseui","AuthUI","uiConfig","callbacks","signInSuccessWithAuthResult","authResult","redirectUrl","credential","signInFlow","signInOptions","provider","FacebookAuthProvider","PROVIDER_ID","scopes","customParameters","auth_type","start","d","s","id","js","fjs","getElementsByTagName","getElementById","createElement","src","parentNode","insertBefore","document","fbAsyncInit","init","appId","autoLogAppEvents","xfbml","version","getLoginStatus","status","getFromDB","populateSelect","orderBy","Loader","active","disabled","pdfData","moment","fromNow","color","docDefinition","pageOrientation","pageSize","content","margin","fontSize","layout","table","widths","body","format","createPdf","open","pages","sort","a","b","localeCompare","className","Container","fluid","Grid","centered","padded","columns","Row","Column","width","Header","as","icon","textAlign","Icon","Content","Segment","Label","circular","empty","Form","onSubmit","Group","TextArea","defaultValue","onChange","required","placeholder","Select","options","Button","fitted","onClick","loader","Table","striped","compact","sortable","fixed","singleLine","HeaderCell","sorted","Body","map","key","Cell","size","href","rel","basic","Component","Boolean","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.282ad86b.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport * as firebase from 'firebase/app';\r\nimport 'firebase/firebase-app';\r\nimport 'firebase/firebase-firestore';\r\nimport * as firebaseui from 'firebaseui';\r\nimport _ from 'lodash';\r\nimport moment from 'moment';\r\nimport pdfMake from 'pdfmake/build/pdfmake';\r\nimport pdfFonts from 'pdfmake/build/vfs_fonts';\r\nimport {\r\n  Container,\r\n  Grid,\r\n  Header,\r\n  Icon,\r\n  Form,\r\n  TextArea,\r\n  Button,\r\n  Select,\r\n  Loader,\r\n  Table,\r\n  Segment,\r\n  Label\r\n} from 'semantic-ui-react';\r\nimport ReactGA from 'react-ga';\r\nReactGA.initialize('UA-158702635-1');\r\nReactGA.pageview(window.location.pathname + window.location.search);\r\npdfMake.vfs = pdfFonts.pdfMake.vfs;\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      accessToken: '',\r\n      currentValue: '',\r\n      currentPage: '',\r\n      data: [],\r\n      oldData: [],\r\n      facebookData: [],\r\n      items: [],\r\n      loading: false,\r\n      appUserID: '',\r\n      column: null,\r\n      direction: null\r\n    };\r\n    this.loadFacebook = this.loadFacebook.bind(this);\r\n    this.addToList = this.addToList.bind(this);\r\n    this.forceRefresh = this.forceRefresh.bind(this);\r\n    this.buildReport = this.buildReport.bind(this);\r\n    this.firebaseUI = this.firebaseUI.bind(this);\r\n    this.deleteRow = this.deleteRow.bind(this);\r\n    this.signOut = this.signOut.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.loadFacebook();\r\n    var config = {\r\n      apiKey: 'AIzaSyCi8s6wYR8LT2hTLwOgEAmduO_3qZE_ohE',\r\n      authDomain: 'facebooktest-f856a.firebaseapp.com',\r\n      projectId: 'facebooktest-f856a'\r\n    };\r\n    firebase.initializeApp(config);\r\n    firebase.auth().onAuthStateChanged((user) => {\r\n      if (user) {\r\n        this.loginFacebook();\r\n        this.setState({appUserID: user.uid});\r\n        console.log(user.uid)\r\n        this.setState({loading: true});\r\n      } else {\r\n        this.firebaseUI();\r\n      }\r\n    });\r\n  }\r\n\r\n  firebaseUI() {\r\n    var ui = new firebaseui.auth.AuthUI(firebase.auth());\r\n    var uiConfig = {\r\n      callbacks: {\r\n        signInSuccessWithAuthResult: (authResult, redirectUrl) => {\r\n          this.setState({accessToken: authResult.credential.accessToken});\r\n          this.loginFacebook();\r\n          return false;\r\n        }\r\n      },\r\n      signInFlow: 'popup',\r\n      signInOptions: [\r\n        {\r\n          provider: firebase.auth.FacebookAuthProvider.PROVIDER_ID,\r\n          scopes: ['manage_pages', 'read_insights'],\r\n          customParameters: {\r\n            auth_type: 'reauthenticate'\r\n          }\r\n        }\r\n      ]\r\n    };\r\n    ui.start('#firebaseui-auth-container', uiConfig);\r\n  }\r\n\r\n  signOut() {\r\n    firebase.auth().signOut();\r\n    this.setState({data: []});\r\n  }\r\n\r\n  loadFacebook() {\r\n    ((d, s, id) => {\r\n      var js,\r\n        fjs = d.getElementsByTagName(s)[0];\r\n      if (d.getElementById(id)) {\r\n        return;\r\n      }\r\n      js = d.createElement(s);\r\n      js.id = id;\r\n      js.src = 'https://connect.facebook.net/en_US/sdk.js';\r\n      fjs.parentNode.insertBefore(js, fjs);\r\n    })(document, 'script', 'facebook-jssdk');\r\n\r\n    window.fbAsyncInit = () => {\r\n      window.FB.init({\r\n        appId: '1497929310342175',\r\n        autoLogAppEvents: true,\r\n        xfbml: true,\r\n        version: 'v3.2',\r\n        state: true\r\n      });\r\n    };\r\n  }\r\n\r\n  loginFacebook() {\r\n    window.FB.getLoginStatus((response) => {\r\n      if (response.status === 'connected') {\r\n        window.FB.api(\r\n          '/me/accounts?fields=id,name,access_token',\r\n          (response) => {\r\n            this.setState({facebookData: response.data});\r\n            this.getFromDB();\r\n            this.populateSelect();\r\n          }\r\n        );\r\n      } else {\r\n        console.log('Login Failed!');\r\n      }\r\n    });\r\n  }\r\n\r\n  getFromDB() {\r\n    const db = firebase.firestore();\r\n    var docRef = db.collection('records').doc(this.state.appUserID);\r\n    docRef\r\n      .get()\r\n      .then((doc) => {\r\n        if (doc.exists) {\r\n          let data = _.orderBy(doc.data().data, 'reach', 'asc');\r\n          this.setState({\r\n            loading: false,\r\n            data: data,\r\n            column: 'reach',\r\n            direction: 'ascending'\r\n          });\r\n        } else {\r\n          console.log('No such document!');\r\n          this.setState({loading: false});\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log('Error getting document', error);\r\n      });\r\n  }\r\n\r\n  saveToDB() {\r\n    const db = firebase.firestore();\r\n    db.collection('records')\r\n      .doc(this.state.appUserID)\r\n      .set(\r\n        {\r\n          data: this.state.data\r\n        },\r\n        {merge: true}\r\n      );\r\n  }\r\n\r\n  loader() {\r\n    if (this.state.loading) {\r\n      return <Loader active />;\r\n    } else {\r\n      return <Loader disabled />;\r\n    }\r\n  }\r\n\r\n  forceRefresh() {\r\n    this.setState({oldData: this.state.data, data: []});\r\n    this.state.data.forEach((element) => {\r\n      this.getMetricsRefresh(element);\r\n    });\r\n  }\r\n\r\n  buildReport() {\r\n    let pdfData = [];\r\n    let data = _.orderBy(this.state.data, 'reach', 'asc');\r\n    pdfData.push([\r\n      'Page',\r\n      'Name',\r\n      'Impressions',\r\n      'Reach',\r\n      'Engagement',\r\n      'Age',\r\n      'Link'\r\n    ]);\r\n    _.forEach(data, (element) => {\r\n      let reach = {text: element.reach.toLocaleString()};\r\n      if (element.reach < 25000) {\r\n        reach['fillColor'] = '#F08080';\r\n      } else if (element.reach < 50000) {\r\n        reach['fillColor'] = '#FF8C00';\r\n      } else if (element.reach < 100000) {\r\n        reach['fillColor'] = '#FFFF00';\r\n      } else if (element.reach < 500000) {\r\n        reach['fillColor'] = '#00FF7F';\r\n      }\r\n      pdfData.push([\r\n        element.pageName,\r\n        element.name,\r\n        element.impressions.toLocaleString(),\r\n        reach,\r\n        element.engagement.toLocaleString(),\r\n        moment(element.created_time, 'DD/MM/YYYY h:mm a').fromNow(),\r\n        {text: 'Link', link: element.link, color: 'blue'}\r\n      ]);\r\n    });\r\n\r\n    var docDefinition = {\r\n      pageOrientation: 'landscape',\r\n      pageSize: 'A4',\r\n      content: [\r\n        {text: 'Facebook Reach Tracker', margin: [0, 0, 0, 16], fontSize: 24},\r\n        {\r\n          layout: 'lightHorizontalLines',\r\n          table: {\r\n            widths: ['auto', '*', 'auto', 'auto', 'auto', 'auto', 'auto'],\r\n            body: pdfData\r\n          }\r\n        },\r\n        {\r\n          text: 'Generated on ' + moment().format('MMMM Do YYYY, h:mm:ss a'),\r\n          margin: [0, 16, 0, 0],\r\n          fontSize: 8\r\n        }\r\n      ]\r\n    };\r\n    pdfMake.createPdf(docDefinition).open();\r\n  }\r\n\r\n  populateSelect() {\r\n    let pages = [];\r\n    this.state.facebookData.forEach((element) => {\r\n      pages.push({\r\n        value: element.id,\r\n        text: element.name,\r\n        access_token: element.access_token\r\n      });\r\n    });\r\n    pages.sort((a, b) => {\r\n      return a.text.localeCompare(b.text);\r\n    });\r\n    this.setState({facebookData: pages});\r\n  }\r\n\r\n  addToList = (e) => {\r\n    e.preventDefault();\r\n    let links = this.state.currentValue;\r\n    links = links.split('\\n');\r\n    links.forEach((element) => {\r\n      this.getMetrics(element);\r\n    });\r\n  };\r\n\r\n  getMetricsRefresh = (element) => {\r\n    this.setState({loading: true});\r\n    let pageData;\r\n    let postData;\r\n    let type = element.type;\r\n    let postId = element.postId;\r\n    let url;\r\n    this.state.facebookData.forEach((e) => {\r\n      if (element.pageId === e.value) {\r\n        pageData = e;\r\n      }\r\n    });\r\n    if (type === 'video') {\r\n    //  url = `/${\r\n    //    pageData.value\r\n    //  }_${postId}/?fields=insights.metric(post_impressions,post_impressions_unique,post_video_views),name,message,created_time`;\r\n      url = `/${\r\n        pageData.value\r\n      }_${postId}/video_insights?metric=['total_video_impressions','total_video_impressions_unique','total_video_views']`;\r\n    } else {\r\n      url = `/${\r\n        pageData.value\r\n      }_${postId}/?fields=insights.metric(post_impressions,post_impressions_unique,post_clicks),name,message,created_time`;\r\n    }\r\n    window.FB.api(\r\n      url,\r\n      {\r\n        access_token: pageData.access_token\r\n      },\r\n      (response) => {\r\n        console.log(response);\r\n        if (type === 'video') {\r\n          postData = {\r\n            link: element.link,\r\n            postId: postId,\r\n            pageId: pageData.value,\r\n            pageName: pageData.text,\r\n            type: type,\r\n            name: response.name,\r\n            message: response.message,\r\n            created_time: new Date(response.created_time).toLocaleString(\r\n              'en-SG'\r\n            ),\r\n            impressions: response.insights.data[2].values[0].value,\r\n            reach: response.insights.data[3].values[0].value,\r\n            engagement: response.insights.data[1].values[0].value\r\n          };\r\n        } else {\r\n          postData = {\r\n            link: element.link,\r\n            postId: postId,\r\n            pageId: pageData.value,\r\n            pageName: pageData.text,\r\n            type: type,\r\n            name: response.name,\r\n            message: response.message,\r\n            created_time: new Date(response.created_time).toLocaleString(\r\n              'en-SG'\r\n            ),\r\n            impressions: response.insights.data[0].values[0].value,\r\n            reach: response.insights.data[1].values[0].value,\r\n            engagement: response.insights.data[2].values[0].value\r\n          };\r\n        }\r\n        let valueList = this.state.data;\r\n        valueList.push(postData);\r\n        this.setState({data: valueList});\r\n        this.saveToDB();\r\n        this.setState({loading: false});\r\n      }\r\n    );\r\n  };\r\n\r\n  getMetrics = (link) => {\r\n    let pageData;\r\n    let postData;\r\n    let type;\r\n    let postId;\r\n    let url;\r\n    this.state.facebookData.forEach((element) => {\r\n      if (this.state.currentPage === element.value) {\r\n        pageData = element;\r\n      }\r\n    });\r\n    if (link.includes('videos')) {\r\n      type = 'video';\r\n      postId = link\r\n        .slice(0, -1)\r\n        .split('/')\r\n        .pop();\r\n      url = `/${\r\n        pageData.value\r\n      }_${postId}/?fields=insights.metric(post_impressions,post_impressions_unique,post_video_views),name,message,created_time`;\r\n    } else {\r\n      type = 'posts';\r\n      postId = link.split('/').pop();\r\n      url = `/${\r\n        pageData.value\r\n      }_${postId}/?fields=insights.metric(post_impressions,post_impressions_unique,post_clicks),name,message,created_time`;\r\n    }\r\n    window.FB.api(\r\n      url,\r\n      {\r\n        access_token: pageData.access_token\r\n      },\r\n      (response) => {\r\n        if (type === 'video') {\r\n          postData = {\r\n            link: link,\r\n            postId: postId,\r\n            pageId: pageData.value,\r\n            pageName: pageData.text,\r\n            type: type,\r\n            name: response.name,\r\n            message: response.message,\r\n            created_time: new Date(response.created_time).toLocaleString(\r\n              'en-SG'\r\n            ),\r\n            impressions: response.insights.data[2].values[0].value,\r\n            reach: response.insights.data[3].values[0].value,\r\n            engagement: response.insights.data[1].values[0].value\r\n          };\r\n        } else {\r\n          postData = {\r\n            link: link,\r\n            postId: postId,\r\n            pageId: pageData.value,\r\n            pageName: pageData.text,\r\n            type: type,\r\n            name: response.name,\r\n            message: response.message,\r\n            created_time: new Date(response.created_time).toLocaleString(\r\n              'en-SG'\r\n            ),\r\n            impressions: response.insights.data[0].values[0].value,\r\n            reach: response.insights.data[1].values[0].value,\r\n            engagement: response.insights.data[2].values[0].value\r\n          };\r\n        }\r\n\r\n        let valueList = this.state.data;\r\n        valueList.push(postData);\r\n        this.setState({data: valueList, currentValue: ''});\r\n        this.saveToDB();\r\n      }\r\n    );\r\n  };\r\n\r\n  deleteRow = (postId) => {\r\n    let data = this.state.data;\r\n    let oldData = _.remove(data, (element) => {\r\n      if (element.postId === postId) {\r\n        return true;\r\n      }\r\n    });\r\n    this.setState({data: data});\r\n    this.saveToDB();\r\n    const db = firebase.firestore();\r\n    var docRef = db.collection('records').doc(this.state.appUserID);\r\n    docRef\r\n      .get()\r\n      .then((doc) => {\r\n        if (doc.exists) {\r\n          if (doc.data().archive !== undefined) {\r\n            let archive = doc.data().archive;\r\n            archive.push(oldData[0]);\r\n            db.collection('records')\r\n              .doc(this.state.appUserID)\r\n              .set(\r\n                {\r\n                  archive: archive\r\n                },\r\n                {merge: true}\r\n              );\r\n          } else {\r\n            db.collection('records')\r\n              .doc(this.state.appUserID)\r\n              .set(\r\n                {\r\n                  archive: oldData\r\n                },\r\n                {merge: true}\r\n              );\r\n          }\r\n        } else {\r\n          console.log('No such document!');\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log('Error getting document', error);\r\n      });\r\n  };\r\n\r\n  handleInputChange = (e) => {\r\n    this.setState({currentValue: e.target.value.split('?')[0]});\r\n  };\r\n\r\n  handleDropdownChange = (e, {value}) => {\r\n    this.setState({\r\n      currentPage: value\r\n    });\r\n  };\r\n\r\n  handleSort = (clickedColumn) => () => {\r\n    const {column, data, direction} = this.state;\r\n    if (column !== clickedColumn) {\r\n      this.setState({\r\n        column: clickedColumn,\r\n        data: _.sortBy(data, [clickedColumn]),\r\n        direction: 'ascending'\r\n      });\r\n\r\n      return;\r\n    }\r\n    this.setState({\r\n      data: data.reverse(),\r\n      direction: direction === 'ascending' ? 'descending' : 'ascending'\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const {column, direction} = this.state;\r\n    return (\r\n      <div className=\"App\">\r\n        <Container fluid>\r\n          <Grid centered padded columns={3}>\r\n            <Grid.Row centered>\r\n              <Grid.Column width={3} />\r\n              <Grid.Column width={10}>\r\n                <Header as=\"h1\" icon textAlign=\"center\">\r\n                  <Icon name=\"facebook\" />\r\n                  <Header.Content>Facebook Insights Tracker</Header.Content>\r\n                </Header>\r\n                <div id=\"firebaseui-auth-container\" />\r\n              </Grid.Column>\r\n              <Grid.Column width={3}>\r\n                <Segment>\r\n                  <Header>Legend</Header>\r\n                  <>\r\n                    <Label circular color=\"red\" empty />\r\n                    {' < 25,000'}\r\n                    <br />\r\n                    <Label circular color=\"orange\" empty />\r\n                    {' < 50,000'}\r\n                    <br />\r\n                    <Label circular color=\"yellow\" empty />\r\n                    {' < 100,000'}\r\n                    <br />\r\n                    <Label circular color=\"green\" empty />\r\n                    {' < 500,000'}\r\n                    <br />\r\n                    <Label circular color=\"blue\" empty />\r\n                    {' > 500,000'}\r\n                  </>\r\n                </Segment>\r\n              </Grid.Column>\r\n            </Grid.Row>\r\n            <Grid.Row>\r\n            <Container>\r\n              <Form onSubmit={this.addToList}>\r\n                <Form.Group>\r\n                  <TextArea\r\n                    defaultValue={this.state.currentValue}\r\n                    onChange={this.handleInputChange}\r\n                    fluid\r\n                    required\r\n                    placeholder=\"Link\"\r\n                    type=\"text\"\r\n                    value={this.state.currentValue}\r\n                    width={8}\r\n                  />\r\n                  <Select\r\n                    placeholder=\"Page\"\r\n                    options={this.state.facebookData}\r\n                    onChange={this.handleDropdownChange}\r\n                    width={3}\r\n                  />\r\n                  <Button type=\"submit\" width={3}>\r\n                    <Icon fitted name=\"add\" />\r\n                  </Button>\r\n                </Form.Group>\r\n              </Form>\r\n            </Container>\r\n            </Grid.Row>\r\n            <Grid.Row>\r\n              <Grid.Column width={10}>\r\n                <Button\r\n                  color=\"green\"\r\n                  content=\"Force Refresh\"\r\n                  onClick={this.forceRefresh}\r\n                />\r\n                {/* <Button\r\n                  color=\"teal\"\r\n                  content=\"Get Video\"\r\n                  onClick={this.forceRefresh}\r\n                /> */}\r\n                <Button\r\n                  color=\"blue\"\r\n                  content=\"Export Report\"\r\n                  onClick={this.buildReport}\r\n                />\r\n                <Button content=\"Sign Out\" onClick={this.signOut} />\r\n              </Grid.Column>\r\n            </Grid.Row>\r\n            <Grid.Row>\r\n              <Grid.Column width={10}>\r\n                {this.loader()}\r\n                <Table striped compact sortable fixed singleLine>\r\n                  <Table.Header>\r\n                    <Table.Row>\r\n                      <Table.HeaderCell>Page</Table.HeaderCell>\r\n                      <Table.HeaderCell>Name</Table.HeaderCell>\r\n                      {/* <Table.HeaderCell>Message</Table.HeaderCell> */}\r\n                      <Table.HeaderCell\r\n                        sorted={column === 'impressions' ? direction : null}\r\n                        onClick={this.handleSort('impressions')}\r\n                      >\r\n                        Impressions\r\n                      </Table.HeaderCell>\r\n                      <Table.HeaderCell\r\n                        sorted={column === 'reach' ? direction : null}\r\n                        onClick={this.handleSort('reach')}\r\n                      >\r\n                        Reach\r\n                      </Table.HeaderCell>\r\n                      <Table.HeaderCell\r\n                        sorted={column === 'engagement' ? direction : null}\r\n                        onClick={this.handleSort('engagement')}\r\n                      >\r\n                        Engagement\r\n                      </Table.HeaderCell>\r\n                      <Table.HeaderCell>Age</Table.HeaderCell>\r\n                      <Table.HeaderCell>Action</Table.HeaderCell>\r\n                    </Table.Row>\r\n                  </Table.Header>\r\n                  <Table.Body>\r\n                    {_.map(\r\n                      this.state.data,\r\n                      ({\r\n                        pageName,\r\n                        postId,\r\n                        name,\r\n                        impressions,\r\n                        reach,\r\n                        engagement,\r\n                        link,\r\n                        type,\r\n                        created_time\r\n                      }) => (\r\n                        <Table.Row key={postId}>\r\n                          <Table.Cell>{pageName}</Table.Cell>\r\n                          <Table.Cell>{name}</Table.Cell>\r\n                          <Table.Cell>\r\n                            {impressions.toLocaleString()}\r\n                          </Table.Cell>\r\n                          <Table.Cell>\r\n                            {reach < 25000 ? (\r\n                              <Label color=\"red\" size=\"large\">\r\n                                <Icon name=\"warning sign\" />\r\n                                {reach.toLocaleString()}\r\n                              </Label>\r\n                            ) : reach < 50000 ? (\r\n                              <Label color=\"orange\" size=\"large\">\r\n                                <Icon name=\"attention\" />\r\n                                {reach.toLocaleString()}\r\n                              </Label>\r\n                            ) : reach < 100000 ? (\r\n                              <Label color=\"yellow\" size=\"large\">\r\n                                <Icon name=\"star half full\" />\r\n                                {reach.toLocaleString()}\r\n                              </Label>\r\n                            ) : reach < 500000 ? (\r\n                              <Label color=\"green\" size=\"large\">\r\n                                <Icon name=\"star\" />\r\n                                {reach.toLocaleString()}\r\n                              </Label>\r\n                            ) : (\r\n                              <Label color=\"blue\" size=\"large\">\r\n                                <Icon name=\"diamond\" />\r\n                                {reach.toLocaleString()}\r\n                              </Label>\r\n                            )}\r\n                          </Table.Cell>\r\n                          <Table.Cell>\r\n                            <p>\r\n                              {type === 'video'\r\n                                ? 'Video Views '\r\n                                : 'Post Clicks '}\r\n                            </p>\r\n                            {engagement.toLocaleString()}\r\n                          </Table.Cell>\r\n                          <Table.Cell>\r\n                            {moment(\r\n                              created_time,\r\n                              'DD/MM/YYYY h:mm a'\r\n                            ).fromNow()}\r\n                          </Table.Cell>\r\n                          <Table.Cell textAlign=\"center\">\r\n                            <a\r\n                              href={link}\r\n                              target=\"_blank\"\r\n                              rel=\"noopener noreferrer\"\r\n                            >\r\n                              <Button basic color=\"blue\" icon=\"eye\" />\r\n                            </a>\r\n                            <Button\r\n                              basic\r\n                              color=\"red\"\r\n                              icon=\"trash alternate outline\"\r\n                              onClick={() => this.deleteRow(postId)}\r\n                            />\r\n                          </Table.Cell>\r\n                        </Table.Row>\r\n                      )\r\n                    )}\r\n                  </Table.Body>\r\n                </Table>\r\n              </Grid.Column>\r\n            </Grid.Row>\r\n          </Grid>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport 'firebaseui/dist/firebaseui.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}